# The FormSubmission class models form data that has been entered in a form generated by a Form object.
# This class relies on its related Form and FormFields to give context to this data.
class FormSubmission < ActiveRecord::Base
  
  belongs_to :form
  has_one :showing
  has_many :form_fields, :through => :form
  
  serialize :data, Hash
  
  def after_initialize
    self.data ||= {}
  end

  def field_keys
    self.form ? self.form.form_fields.map(&:name) : []
  end
  
  def valid_with_dynamic_validation?
    valid_without_dynamic_validation?
    self.form.form_fields.each { |ff| ff.validate_submission(self) }
    return self.errors.blank?
  end
  alias_method_chain :valid?, :dynamic_validation
  
  # Developed by Chris Powers, Killswitch Collective on 10/22/2008
  #
  # <b>Description:</b> Loop through the fields and easily access the value
  #
  # <em>Syntax: @form_submission.each_field do |field, value|</em>
  def each_field
    self.form.form_fields.each do |field|
      yield field, self.data[field.name.to_sym]
    end
  end
  
  private

  # Setup accessor to attach #data[:field_key] to #data.field_key
  # for both setters and getters.
  # --
  # Author:: Jacob Basham & Chris Powers, Killswitch Collective
  # ++
  def method_missing(method_name, *args, &block)
    name = method_name.to_s
    
    if field_keys.include? name.gsub(/=/, '')
      return name.include?("=") ? self.data[name.gsub(/=/, '').to_sym] = args.first : self.data[method_name]
    else
      logger.debug("Form is #{form} and the fields are #{self.form.form_fields if self.form}")
      super
    end
  end

end
