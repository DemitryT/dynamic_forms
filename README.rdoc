= DynamicForms

Originally Created by Chris Powers, March 19, 2009

Thanks to Jacob Basham (http://github.com/jkster) for his additions and refactoring.

Updates done by Tom Cocca in 2010

== Make Your Own Forms

The DynamicForms plugin is an engine that allows your users to create their own forms on your Web app. These forms act like regular Rails forms, using validation, error checking, the works.

Once you've installed the plugin run the generator and all the files have been copied into your app, feel free to customize as you see fit. Here's a few suggestions:

* You will probably want to add relationships between Forms, FormSubmissions and your user/account model, assuming you want users to has_many :forms and/or has_many :form_submissions
* You will also probably want to add your login authentication to the FormsController and FormSubmissionsController
* I tried not to presuppose much in terms of styling, CSS class names, etc., so you will need to significantly alter some of the views to integrate them into your app

For those of you who can make use of this plugin, I hope that this saves you a lot of time!

== INSTALLATION

Install as a plugin:

  script/plugin install git://github.com/tcocca/dynamic_forms.git

Run the generator:

  script/generate dynamic_forms

The generator will generate a migration and a bunch of models.  The model files will just have includes to modules that are in the lib directory of the plugin.

== CURRENT FORM OPTIONS

* Create and edit a form
* Choose form fields
* Set validations on the field
* Set form "instruction text" that appears above the form fields
* Set form "confirmation text" that appears after a form has been submitted successfully
* Ability to opt to have an email sent on successful form submission with file uploads as attachments
* Can set the delivery email on a per form basis
* On submission the answers are validated
* File Field uploads are only saved to the file system for a submission that passes validation
* Ability to see all form submissions with answers

=== Field Types:
* Text Field
* Text Area
* Check Box
* Check Box Group
* Select
* File Field
* Radio Button Select

=== Validations:
(Field Types applicable in ())

* Required (Text Field, Text Area, File Field, Select, Check Box Group, Radio Button Select)
* Phone Number (Text Field)
* Email Address (Text Field)
* Zip Code (Text Field)
* URL (Text Field)
* Min Characters (Text Field, Text Area)
* Max Characters (Text Field, Text Area)
* Number (Text Field)
* Mime Types (File Field) - if this option is left blank it will use a default set of mime types so there is always validation on a file upload
* Confirmed (Check Box) - checkbox must be checked, useful for "you agree" type of questions

== TODO

* Better Documentation

* Shoulda and Cucumber Tests

* Make Javascript Unobtrusive
  * Default Javascript File
  * Be able to support both Prototype and JQuery

* Default Stylesheet

* Add a helper method to include the dynamic_forms public assets in the template ( <%= dynamic_forms_includes %> )

* More Field Choices
  * Country Select Field (use a plugin => http://github.com/rails/country_select)
  * US State Select (use a plugin => http://github.com/sprsquish/state_select or http://github.com/jslag/us-state-select-plugin)
  * Date Field
  * Time Field
  * Datetime Field
    * I would like to be able to use a nice JS date/time picker but I would need a way to support both Prototype and JQuery

* Update the way the routes are generated

* Be able to re-order the form fields

* Be able to set the following field options
  * Select: Size (for multiselect), Default? (selected value)
  * Check Box: Checked? (whether to check the box by default)
  * Check Box Group: Checked? (whether to check the box by default)
  * Radio Button: Default? (which option should be selected by default)

* Add a new meta field option to check box fields:  Terms and Conditions
  * Be able to add a Terms and Conditions checkbox above the checkbox, the answer will be the agreement to the terms (checking the box)
  * The Terms and Conditions will be in a READ ONLY text area field with the checkbox below
  * use the new confirmed? validation to make people agree to the terms

* Support internationalization (I18n)
  * Might even make it easier for users to override flash and error messages without having to override modules or classes

==

Copyright (c) 2010 Tom Cocca (Original Work done in 2009 by Chris Powers), released under the MIT license
